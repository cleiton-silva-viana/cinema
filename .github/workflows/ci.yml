name: CI Pipeline - Hybrid

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Configura√ß√µes opcionais - usu√°rios podem definir nos secrets do reposit√≥rio
  ENABLE_SONARQUBE: ${{ secrets.SONAR_TOKEN != '' }}
  ENABLE_CODECOV: ${{ secrets.CODECOV_TOKEN != '' }}
  ENABLE_DOCKER_SECURITY: ${{ secrets.DOCKER_USERNAME != '' }}
  ENABLE_CACHE: ${{ secrets.ENABLE_CACHE == 'true' || vars.ENABLE_CACHE == 'true' }}

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
      coverage-generated: ${{ steps.coverage.outputs.generated }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Setup Node.js com cache condicional - CORRIGIDO
      - name: Setup Node.js (with cache)
        if: env.ENABLE_CACHE == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Setup Node.js (without cache)
        if: env.ENABLE_CACHE != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node_modules
        if: env.ENABLE_CACHE == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          if [[ "${{ env.ENABLE_CACHE }}" == "true" && "${{ steps.cache.outputs.cache-hit }}" == "true" ]]; then
            echo "‚úÖ Dependencies restored from cache"
          else
            echo "üì¶ Installing dependencies..."
            npm ci
          fi
      
      - name: Code Quality checks
        run: |
          echo "üîç Running code quality checks..."
          npm run format
          npm run lint
          npm run typecheck
      
      - name: Run Tests
        run: |
          echo "üß™ Running tests..."
          npm test
          npm run test:e2e
      
      - name: Generate Coverage
        id: coverage
        run: |
          echo "üìä Generating coverage report..."
          npm run test:cov
          echo "generated=true" >> $GITHUB_OUTPUT

      - name: Docker Build Test
        run: |
          echo "üê≥ Testing Docker build..."
          docker build -t cinema-backend:test .
          echo "‚úÖ Docker build successful!"

      - name: Upload Coverage Artifacts
        if: steps.coverage.outputs.generated == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: ./backend/coverage/
          retention-days: 1

  codecov-upload:
    name: Upload to Codecov
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ needs.build-and-test.outputs.coverage-generated == 'true' && secrets.CODECOV_TOKEN != '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download Coverage Reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
          path: ./backend/coverage/
      
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true

  docker-security:
    name: Docker Security Scans
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ secrets.DOCKER_USERNAME != '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Docker Security Analysis
        run: |
          cd backend
          
          # Hadolint - Dockerfile linting
          echo "üîç Analyzing Dockerfile with Hadolint..."
          docker run --rm -i hadolint/hadolint < Dockerfile || echo "‚ö†Ô∏è Dockerfile issues found"
          
          # Build image for security scanning
          echo "üèóÔ∏è Building image for security scan..."
          docker build -t cinema-backend:security .
          
          # Trivy - Vulnerability scanning
          echo "üõ°Ô∏è Scanning for vulnerabilities with Trivy..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image cinema-backend:security || echo "‚ö†Ô∏è Vulnerabilities found"
